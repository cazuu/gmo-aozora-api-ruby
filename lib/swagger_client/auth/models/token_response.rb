=begin
#GMO Aozora Net Bank Open API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.0

=end

require 'date'

module SwaggerClient
  class TokenResponse
    # アクセストークン。 各APIを要求する際「x-access-token」に設定する値。 
    attr_accessor :access_token

    # 新しいアクセストークンを取得する際に使用するリフレッシュトークン。 
    attr_accessor :refresh_token

    # アクセストークンに紐付く許諾されたスコープ。
    attr_accessor :scope

    # アクセストークンに紐付く許諾されたスコープ。
    attr_accessor :token_type

    # アクセストークンの有効期限。(秒単位)
    attr_accessor :expires_in

    # IDトークン。 JWT形式で応答される。
    attr_accessor :id_token

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'access_token' => :'access_token',
        :'refresh_token' => :'refresh_token',
        :'scope' => :'scope',
        :'token_type' => :'token_type',
        :'expires_in' => :'expires_in',
        :'id_token' => :'id_token'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'access_token' => :'String',
        :'refresh_token' => :'String',
        :'scope' => :'String',
        :'token_type' => :'String',
        :'expires_in' => :'String',
        :'id_token' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'access_token')
        self.access_token = attributes[:'access_token']
      end

      if attributes.has_key?(:'refresh_token')
        self.refresh_token = attributes[:'refresh_token']
      end

      if attributes.has_key?(:'scope')
        self.scope = attributes[:'scope']
      end

      if attributes.has_key?(:'token_type')
        self.token_type = attributes[:'token_type']
      end

      if attributes.has_key?(:'expires_in')
        self.expires_in = attributes[:'expires_in']
      end

      if attributes.has_key?(:'id_token')
        self.id_token = attributes[:'id_token']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @access_token.nil?
        invalid_properties.push('invalid value for "access_token", access_token cannot be nil.')
      end

      if @access_token.to_s.length > 128
        invalid_properties.push('invalid value for "access_token", the character length must be smaller than or equal to 128.')
      end

      if @access_token.to_s.length < 1
        invalid_properties.push('invalid value for "access_token", the character length must be great than or equal to 1.')
      end

      if @refresh_token.nil?
        invalid_properties.push('invalid value for "refresh_token", refresh_token cannot be nil.')
      end

      if @refresh_token.to_s.length > 128
        invalid_properties.push('invalid value for "refresh_token", the character length must be smaller than or equal to 128.')
      end

      if @refresh_token.to_s.length < 1
        invalid_properties.push('invalid value for "refresh_token", the character length must be great than or equal to 1.')
      end

      if @scope.nil?
        invalid_properties.push('invalid value for "scope", scope cannot be nil.')
      end

      if @scope.to_s.length > 256
        invalid_properties.push('invalid value for "scope", the character length must be smaller than or equal to 256.')
      end

      if @scope.to_s.length < 1
        invalid_properties.push('invalid value for "scope", the character length must be great than or equal to 1.')
      end

      if @token_type.nil?
        invalid_properties.push('invalid value for "token_type", token_type cannot be nil.')
      end

      if @expires_in.nil?
        invalid_properties.push('invalid value for "expires_in", expires_in cannot be nil.')
      end

      if @expires_in.to_s.length > 20
        invalid_properties.push('invalid value for "expires_in", the character length must be smaller than or equal to 20.')
      end

      if @expires_in.to_s.length < 1
        invalid_properties.push('invalid value for "expires_in", the character length must be great than or equal to 1.')
      end

      if !@id_token.nil? && @id_token.to_s.length > 20
        invalid_properties.push('invalid value for "id_token", the character length must be smaller than or equal to 20.')
      end

      if !@id_token.nil? && @id_token.to_s.length < 1
        invalid_properties.push('invalid value for "id_token", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @access_token.nil?
      return false if @access_token.to_s.length > 128
      return false if @access_token.to_s.length < 1
      return false if @refresh_token.nil?
      return false if @refresh_token.to_s.length > 128
      return false if @refresh_token.to_s.length < 1
      return false if @scope.nil?
      return false if @scope.to_s.length > 256
      return false if @scope.to_s.length < 1
      return false if @token_type.nil?
      return false if @expires_in.nil?
      return false if @expires_in.to_s.length > 20
      return false if @expires_in.to_s.length < 1
      return false if !@id_token.nil? && @id_token.to_s.length > 20
      return false if !@id_token.nil? && @id_token.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] access_token Value to be assigned
    def access_token=(access_token)
      if access_token.nil?
        fail ArgumentError, 'access_token cannot be nil'
      end

      if access_token.to_s.length > 128
        fail ArgumentError, 'invalid value for "access_token", the character length must be smaller than or equal to 128.'
      end

      if access_token.to_s.length < 1
        fail ArgumentError, 'invalid value for "access_token", the character length must be great than or equal to 1.'
      end

      @access_token = access_token
    end

    # Custom attribute writer method with validation
    # @param [Object] refresh_token Value to be assigned
    def refresh_token=(refresh_token)
      if refresh_token.nil?
        fail ArgumentError, 'refresh_token cannot be nil'
      end

      if refresh_token.to_s.length > 128
        fail ArgumentError, 'invalid value for "refresh_token", the character length must be smaller than or equal to 128.'
      end

      if refresh_token.to_s.length < 1
        fail ArgumentError, 'invalid value for "refresh_token", the character length must be great than or equal to 1.'
      end

      @refresh_token = refresh_token
    end

    # Custom attribute writer method with validation
    # @param [Object] scope Value to be assigned
    def scope=(scope)
      if scope.nil?
        fail ArgumentError, 'scope cannot be nil'
      end

      if scope.to_s.length > 256
        fail ArgumentError, 'invalid value for "scope", the character length must be smaller than or equal to 256.'
      end

      if scope.to_s.length < 1
        fail ArgumentError, 'invalid value for "scope", the character length must be great than or equal to 1.'
      end

      @scope = scope
    end

    # Custom attribute writer method with validation
    # @param [Object] expires_in Value to be assigned
    def expires_in=(expires_in)
      if expires_in.nil?
        fail ArgumentError, 'expires_in cannot be nil'
      end

      if expires_in.to_s.length > 20
        fail ArgumentError, 'invalid value for "expires_in", the character length must be smaller than or equal to 20.'
      end

      if expires_in.to_s.length < 1
        fail ArgumentError, 'invalid value for "expires_in", the character length must be great than or equal to 1.'
      end

      @expires_in = expires_in
    end

    # Custom attribute writer method with validation
    # @param [Object] id_token Value to be assigned
    def id_token=(id_token)
      if !id_token.nil? && id_token.to_s.length > 20
        fail ArgumentError, 'invalid value for "id_token", the character length must be smaller than or equal to 20.'
      end

      if !id_token.nil? && id_token.to_s.length < 1
        fail ArgumentError, 'invalid value for "id_token", the character length must be great than or equal to 1.'
      end

      @id_token = id_token
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          access_token == o.access_token &&
          refresh_token == o.refresh_token &&
          scope == o.scope &&
          token_type == o.token_type &&
          expires_in == o.expires_in &&
          id_token == o.id_token
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [access_token, refresh_token, scope, token_type, expires_in, id_token].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
